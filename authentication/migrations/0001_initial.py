# Generated by Django 3.1.5 on 2021-01-09 08:19

import authentication.managers
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('auth.group',),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 50 characters or fewer. only contain lowercase letters or underscores.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(code='invalid', message='Enter a valid UserName consisting of lowercase letters or underscores.', regex='^[a-z_]*$')], verbose_name='username')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email address already exists.'}, help_text='Required. valid email must be provided to use when contact with user.', max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=90, verbose_name='last name')),
                ('token', models.CharField(blank=True, db_index=True, max_length=50, verbose_name='token')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active status')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has completed sign up process.', verbose_name='Has Verified Account')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'authentication Accounts',
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', authentication.managers.UserManager()),
            ],
        ),
    ]
